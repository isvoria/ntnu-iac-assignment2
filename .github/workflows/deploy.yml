name: 'Terraform deploy'

on:
  workflow_call:

jobs:
  terraform_deploy:
    name: 'Terraform plan and apply'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }} # dev not protected by enviroment rules, does not wait for manual approval, but stage and prod does
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - name: 'Checkout code'
        uses: actions/checkout@v3

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v2

      # this is needed because i do not have a custom docker image yet, and the docker image i use dont have az but github actions does
      - name: 'Check and install Azure CLI'
        run: |
          if ! command -v az &> /dev/null; then
            echo "Azure CLI not found, installing..."
            curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
          else
            echo "Azure CLI is already installed."
          fi

      - name: 'Azure login'
        run: az login --service-principal --username ${{ secrets.AZURE_CLIENT_ID }} --password=${{ secrets.AZURE_CLIENT_SECRET }} --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: 'Set Azure subscription'
        run: az account set --subscription 3291a0d9-96b5-41ee-9b93-5b28b419919f

      - name: 'Terraform init'
        working-directory: ./deployments
        run: terraform init

      - name: 'Select terraform workspace'
        working-directory: ./deployments
        run: terraform workspace select ${{ github.ref_name }} || terraform workspace new ${{ github.ref_name }}

      - name: 'Create tfvars file'
        working-directory: ./deployments
        run: echo "$TFVARS_CONTENT" > ${{ github.ref_name }}.tfvars
        env:
          TFVARS_CONTENT: ${{ secrets.TFVARS_CONTENT }} # i decided to have the tfvars as a secret because of the mysql password, the secret is an envirometn secret so it changes between dev, stage and prod

      - name: 'Terraform plan'
        working-directory: ./deployments
        run: terraform plan -var-file="${{ github.ref_name }}.tfvars" -out="${{ github.ref_name }}.plan"

      - name: 'Terraform apply'
        working-directory: ./deployments
        run: terraform apply -auto-approve "${{ github.ref_name }}.plan"